{"ast":null,"code":"var _jsxFileName = \"/Users/lenkazivkovic/Desktop/react-with-typescript/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // const [number, setNumber] = useState<number>(5);  \n  // const changeNumber = () => {\n  //   setNumber(10)\n  // }\n  const [people, setPeople] = useState([]);\n  people.map(person => {\n    person.name;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"People invited to my party\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"QznwlLpyGnQEJtA3lYfueAtPpXk=\");\n\n_c = App;\nexport default App; // useState hook is responsible for storing data inside of a component \n// interface defines the syntax for classes to follow, they facilitate not just object-oriented programming but also type-checking \n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/lenkazivkovic/Desktop/react-with-typescript/src/App.tsx"],"names":["React","useState","App","people","setPeople","map","person","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AAEA;AACA;AACA;AAWA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,QAAQ,CAAmB,EAAnB,CAApC;AAEFE,EAAAA,MAAM,CAACE,GAAP,CAAWC,MAAM,IAAI;AACnBA,IAAAA,MAAM,CAACC,IAAP;AACD,GAFD;AAGE,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GA1BQL,G;;KAAAA,G;AA4BT,eAAeA,GAAf,C,CAGA;AACA","sourcesContent":["import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  // const [number, setNumber] = useState<number>(5);  \n\n  // const changeNumber = () => {\n  //   setNumber(10)\n  // }\n\n  interface IState {\n    people: {\n      name: string, \n      age: number, \n      url: string, \n      note? : string\n    }[]\n  }\n\n  const [people, setPeople] = useState<IState[\"people\"]>([])\n\npeople.map(person => {\n  person.name \n})\n  return (\n    <div className=\"App\">\n      <h1>People invited to my party</h1>\n    </div>\n  );\n}\n\nexport default App;\n\n\n// useState hook is responsible for storing data inside of a component \n// interface defines the syntax for classes to follow, they facilitate not just object-oriented programming but also type-checking "]},"metadata":{},"sourceType":"module"}